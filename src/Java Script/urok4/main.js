//структура данных массива
//как разлечить todolist по id,
//todolist имеет название title
// для рендеринга таски- значения фильтра  todolist имеет настройку filter
//  у каждого todolist есть свот tasks

//попробуем разделить на 2 структуры, который будут между сабой связаны
// но каждая из этих структур будет менее обьемной
//обьемная -это массив в массиве
//есть плоские данные
//будем отдельно хранить список todolist  и одельно будем хранить tasks

//Как нам сложить task для каждого todolist
//используем обьект в который положим, пары ключ -значение


//записали id в переменную и теперь можем использовать значение(сгенирированное)
const todolist_1 = "23hj-76jd"
const todolist_2 = " 28hj-101pd"


const todolist = [
    {
        id: todolist_1,
        title: "What to learn",
        filter: "all",
    },
    {
        id: todolist_2,
        title: "What to buy",
        filter: "all",
    },
]


//вместо названий используем id todolist

// id уникальные но,строка может быть ключем в обьекте
// в обьекте ключи не повторяються/уникальность требование
// уникальная строка id  может быть
// id разные, но мы знаем переменную в которой этот id будет сохранен
//но если мы напишим todolist_1: так ,то будет создан ключ с тем же названием
//но у нас переменная, а не название ключа! В переменной лежит название ключа
//мы можем использовать спецефический синтаксис ВЫЧЕСЛЯЕМОЕ СВОЙСТВО ОБЪЕКТА- квадратные скобки []
// это выражение которое должно быть выполненно [todolist_1],а результат этого выражения используеться в качестве ключа

const tasks = {
    [todolist_1]: [
        {id: 1, title: "React", isDone: false},
        {id: 2, title: "HTML", isDone: false},
        {id: 3, title: "JS", isDone: false},
    ],

    [todolist_2]: [
        {id: 4, title: "Bread", isDone: false},
        {id: 5, title: "Milk", isDone: false},
        {id: 6, title: "Chicken", isDone: false},
    ]

}

//отфельтрованный массив, первую таску удалит
//console.log(tasks[todolist_1[0].title].filter(t => t.id !== 1))

//в качестве ключей используем готовые строки в обьекте
// в обьекте ключи не повторяються/уникальность

//Ассоциоьтвный массив -это обстрактная структура данных,
// которая имеет конкретные реализации в различных языках программирования

const nums = [2, 4, 6, 3, 5]
nums.reduce((acc, el) => {
    return acc + el
}, 0)
//0,2=>2
//2,4=>6
//6,6=>12
//12,3=>15
//15,5=>20
// =>20


//условие если acc больше el , то true
//если все значения закончились то будет игогом 6 или самый большой элемент  массива

//Метод reducer в JavaScript относится к функции, которая принимает на вход аккумулятор и текущий элемент массива,
// выполняет операцию над ними и возвращает новое значение аккумулятора.
// Этот метод часто используется с методом Array.prototype.reduce() для агрегации значений в массиве. Пример:
nums.reduce((acc, el) => acc > el ? acc : el)
//2,4=>4
//4,6=>6
//6,3=>6
//6,5=>6

const student = [
    {
        id: 1,
        name: "Bob",
        age: 22,
        isMarried: true,
        scores: 85
    },
    {
        id: 2,
        name: "Alex",
        age: 21,
        isMarried: true,
        scores: 89
    },

    {
        id: 3,
        name: "Nick",
        age: 20,
        isMarried: false,
        scores: 120
    },
    {
        id: 4,
        name: "John",
        age: 29,
        isMarried: false,
        scores: 100
    },

];

const newData = {
    "1": {
        name: "Bob",
        age: 22,
        isMarried: true,
        scores: 85
    },
    "2": {
        name: "Alex",
        age: 21,
        isMarried: true,
        scores: 89
    },
}


//создаем ключ id 1 student/ по этому ключу мы положим положим копию обьекта студенты

//если нам нужно удалить id /говорим   delete acc[el.id].id
// вернуть асс из нашей функции для того, чтобы на следующую эторацию у нас пошел
//обьект внутри которого уже создана одна пара ключ: значение

0
const data = student.reduce((acc, el) => {
    acc[el.id] = {...el};
    delete acc[el.id].id;
    return acc;
}, {});

//console.log(data);

//получим массив будут лежать все студенты им добавили по 20 очков
const st20 = student.map(s => ({...s, scores: s.scores + 20}))
console.log(st20)

const st20reduce = student.reduce((acc, el) => {
    const copy = {...el}
    copy.scores = el.scores + 20
    acc.push(copy)
    return acc

}, [])

console.log(st20reduce)
//если получили данные и предпологаеться неоднократный поиск данных по массиву можно спомощью метода reducer

